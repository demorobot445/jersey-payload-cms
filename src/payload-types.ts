/* tslint:disable */
/* eslint-disable */
/**
 * This file was automatically generated by Payload.
 * DO NOT MODIFY IT BY HAND. Instead, modify your source Payload config,
 * and re-run `payload generate:types` to regenerate this file.
 */

export interface Config {
  collections: {
    users: User;
    media: Media;
    products: Product;
    categories: Category;
    "library-main-categories": LibraryMainCategory;
    "library-sub-categories": LibrarySubCategory;
    colors: Color;
    "color-pallets": ColorPallet;
    "payload-preferences": PayloadPreference;
    "payload-migrations": PayloadMigration;
  };
  globals: {};
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "users".
 */
export interface User {
  id: string;
  updatedAt: string;
  createdAt: string;
  email: string;
  resetPasswordToken?: string | null;
  resetPasswordExpiration?: string | null;
  salt?: string | null;
  hash?: string | null;
  password: string | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "media".
 */
export interface Media {
  id: string;
  alt: string;
  updatedAt: string;
  createdAt: string;
  url?: string | null;
  filename?: string | null;
  mimeType?: string | null;
  filesize?: number | null;
  width?: number | null;
  height?: number | null;
  focalX?: number | null;
  focalY?: number | null;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "products".
 */
export interface Product {
  id: string;
  name: string;
  previewImage: string | Media;
  model: string | Media;
  colorPallets: {
    modelColorPallet: string | ColorPallet;
    libraryColorPallet: string | ColorPallet;
    textColorPallet: string | ColorPallet;
  };
  controls?: {
    rightChestActive?: boolean | null;
    leftChestActive?: boolean | null;
    centerChestActive?: boolean | null;
    backActive?: boolean | null;
    rightSleeveActive?: boolean | null;
    leftSleeveActive?: boolean | null;
    libraryActive?: boolean | null;
    textActive?: boolean | null;
    playerDetailActive?: boolean | null;
    addToCartActive?: boolean | null;
  };
  rightChest: {
    positionX: number;
    positionY: number;
    scale: number;
    rotate: number;
  };
  centerChest: {
    positionX: number;
    positionY: number;
    scale: number;
    rotate: number;
  };
  leftChest: {
    positionX: number;
    positionY: number;
    scale: number;
    rotate: number;
  };
  back: {
    positionX: number;
    positionY: number;
    scale: number;
    rotate: number;
  };
  rightSleeve: {
    positionX: number;
    positionY: number;
    scale: number;
    rotate: number;
  };
  leftSleeve: {
    positionX: number;
    positionY: number;
    scale: number;
    rotate: number;
  };
  presetText: {
    positionX: number;
    positionY: number;
    textSize: number;
  };
  patterns: {
    name: string;
    icon: string | Media;
    patternSvg: string | Media;
    colorOptions?:
      | {
          title: string;
          svgColorId: string;
          defaultColorHexCode: string | Color;
          id?: string | null;
        }[]
      | null;
    id?: string | null;
  }[];
  quantityBasedPrices: {
    quantity: number;
    price: number;
    id?: string | null;
  }[];
  sizes: {
    name: string;
    id?: string | null;
  }[];
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "color-pallets".
 */
export interface ColorPallet {
  id: string;
  name: string;
  colors: (string | Color)[];
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "colors".
 */
export interface Color {
  id: string;
  name: string;
  hexCode: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "categories".
 */
export interface Category {
  id: string;
  title: string;
  image: string | Media;
  subCategoriesActive: boolean;
  products?: (string | Product)[] | null;
  subCategories?:
    | {
        title: string;
        image: string | Media;
        products: (string | Product)[];
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "library-main-categories".
 */
export interface LibraryMainCategory {
  id: string;
  name: string;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "library-sub-categories".
 */
export interface LibrarySubCategory {
  id: string;
  name: string;
  mainCategory: string | LibraryMainCategory;
  images?:
    | {
        image: string | Media;
        colors?:
          | {
              svgColorId: string;
              defaultColorHexCode: string;
              id?: string | null;
            }[]
          | null;
        id?: string | null;
      }[]
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-preferences".
 */
export interface PayloadPreference {
  id: string;
  user: {
    relationTo: "users";
    value: string | User;
  };
  key?: string | null;
  value?:
    | {
        [k: string]: unknown;
      }
    | unknown[]
    | string
    | number
    | boolean
    | null;
  updatedAt: string;
  createdAt: string;
}
/**
 * This interface was referenced by `Config`'s JSON-Schema
 * via the `definition` "payload-migrations".
 */
export interface PayloadMigration {
  id: string;
  name?: string | null;
  batch?: number | null;
  updatedAt: string;
  createdAt: string;
}

declare module "payload" {
  export interface GeneratedTypes extends Config {}
}
